//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ReminderReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReminderDetail", Namespace="http://schemas.datacontract.org/2004/07/ReminderService")]
    [System.SerializableAttribute()]
    public partial class ReminderDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIdField, value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeField, value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReminderReference.IReminder")]
    public interface IReminder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/getAllReminders", ReplyAction="http://tempuri.org/IReminder/getAllRemindersResponse")]
        Client.ReminderReference.ReminderDetail[] getAllReminders(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/getAllReminders", ReplyAction="http://tempuri.org/IReminder/getAllRemindersResponse")]
        System.Threading.Tasks.Task<Client.ReminderReference.ReminderDetail[]> getAllRemindersAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/insertReminder", ReplyAction="http://tempuri.org/IReminder/insertReminderResponse")]
        string insertReminder(string UserId, System.DateTime date, string time, string eventType, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/insertReminder", ReplyAction="http://tempuri.org/IReminder/insertReminderResponse")]
        System.Threading.Tasks.Task<string> insertReminderAsync(string UserId, System.DateTime date, string time, string eventType, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/updateReminder", ReplyAction="http://tempuri.org/IReminder/updateReminderResponse")]
        string updateReminder(string UserId, System.DateTime date, string time, string eventType, string description, string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/updateReminder", ReplyAction="http://tempuri.org/IReminder/updateReminderResponse")]
        System.Threading.Tasks.Task<string> updateReminderAsync(string UserId, System.DateTime date, string time, string eventType, string description, string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/deleteReminder", ReplyAction="http://tempuri.org/IReminder/deleteReminderResponse")]
        string deleteReminder(string UserId, string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/deleteReminder", ReplyAction="http://tempuri.org/IReminder/deleteReminderResponse")]
        System.Threading.Tasks.Task<string> deleteReminderAsync(string UserId, string eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/authenticate", ReplyAction="http://tempuri.org/IReminder/authenticateResponse")]
        bool authenticate(string userid, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/authenticate", ReplyAction="http://tempuri.org/IReminder/authenticateResponse")]
        System.Threading.Tasks.Task<bool> authenticateAsync(string userid, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/registerUser", ReplyAction="http://tempuri.org/IReminder/registerUserResponse")]
        string registerUser(string userid, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReminder/registerUser", ReplyAction="http://tempuri.org/IReminder/registerUserResponse")]
        System.Threading.Tasks.Task<string> registerUserAsync(string userid, string password, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReminderChannel : Client.ReminderReference.IReminder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReminderClient : System.ServiceModel.ClientBase<Client.ReminderReference.IReminder>, Client.ReminderReference.IReminder {
        
        public ReminderClient() {
        }
        
        public ReminderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReminderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReminderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReminderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ReminderReference.ReminderDetail[] getAllReminders(string UserId) {
            return base.Channel.getAllReminders(UserId);
        }
        
        public System.Threading.Tasks.Task<Client.ReminderReference.ReminderDetail[]> getAllRemindersAsync(string UserId) {
            return base.Channel.getAllRemindersAsync(UserId);
        }
        
        public string insertReminder(string UserId, System.DateTime date, string time, string eventType, string description) {
            return base.Channel.insertReminder(UserId, date, time, eventType, description);
        }
        
        public System.Threading.Tasks.Task<string> insertReminderAsync(string UserId, System.DateTime date, string time, string eventType, string description) {
            return base.Channel.insertReminderAsync(UserId, date, time, eventType, description);
        }
        
        public string updateReminder(string UserId, System.DateTime date, string time, string eventType, string description, string eventId) {
            return base.Channel.updateReminder(UserId, date, time, eventType, description, eventId);
        }
        
        public System.Threading.Tasks.Task<string> updateReminderAsync(string UserId, System.DateTime date, string time, string eventType, string description, string eventId) {
            return base.Channel.updateReminderAsync(UserId, date, time, eventType, description, eventId);
        }
        
        public string deleteReminder(string UserId, string eventId) {
            return base.Channel.deleteReminder(UserId, eventId);
        }
        
        public System.Threading.Tasks.Task<string> deleteReminderAsync(string UserId, string eventId) {
            return base.Channel.deleteReminderAsync(UserId, eventId);
        }
        
        public bool authenticate(string userid, string password) {
            return base.Channel.authenticate(userid, password);
        }
        
        public System.Threading.Tasks.Task<bool> authenticateAsync(string userid, string password) {
            return base.Channel.authenticateAsync(userid, password);
        }
        
        public string registerUser(string userid, string password, string email) {
            return base.Channel.registerUser(userid, password, email);
        }
        
        public System.Threading.Tasks.Task<string> registerUserAsync(string userid, string password, string email) {
            return base.Channel.registerUserAsync(userid, password, email);
        }
    }
}
